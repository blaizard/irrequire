(function(n) {
	// Create the irRequire only if it does not exists
	if (!n.irRequire) {
		/**
		 * \brief Creates a promise and resolve it when the object/variable/function is available.
		 *
		 * \alias irRequire
		 *
		 * \param functionName Can be a string or an array of string
		 * \param [timeout] The time in milliseconds, before the function times out.
		 */
		n.irRequire = (functionName, timeout) => {
			return new Promise((resolve, reject) => {
				// Wait for maximum 5 seconds by default
				n.irRequire.a(functionName, resolve, reject, timeout || 5000);
			});
		}

		n.irRequire.a = (functionName, resolve, reject, timeout) => {

			// If this is a string, convert it into an array to make the code compatible
			if (typeof functionName === "string") {
				functionName = [functionName];
			}

			// Check if function is ready
			var ready = 1;
			functionName.forEach((name) => {
				try {
					// If the function is not ready
					if (typeof(eval(name)) === "undefined") {
						throw 1;
					}
					n.irRequire.h(name);
				}
				catch (err) {
					ready = 0;
					var urlList = irRequire.map[name] || [];
					if (!(urlList instanceof Array)) {
						urlList = [urlList];
						irRequire.map[name] = [];
					}
					// If the file is not loaded yet
					while (urlList.length) {
						var url = urlList.shift();
						if (irRequire.map[url]) {
							return irRequire(url, timeout).then(() => {
								irRequire.a(functionName, resolve, reject, timeout);
							});
						}
						n.irRequire.h(name, url);
						// Load CSS ressource
						var elt;
						if (url.search(/\.css$/i) >= 0) {
							elt = document.createElement("link");
							elt.href = url;
							elt.rel = "stylesheet";
							elt.type = "text/css";
						}
						// Else load javascript
						else {
							elt = document.createElement("script");
							elt.src = url;
							elt.type = "text/javascript";
						}
						elt.onerror = () => {
							reject(new Error("cannot load " + (elt.src || elt.href)));
						};
						document.getElementsByTagName("head")[0].appendChild(elt);
					}
				}
			});

			if (ready) {
				resolve(1);
			}
			else if (timeout > 0) {
				setTimeout(() => {
					irRequire.a(functionName, resolve, reject, timeout - 100);
				}, 100);
			}
			else {
				reject(new Error(functionName.join() + " timed-out"));
			}
		};

		/**
		 * Map object names with their urls
		 */
		n.irRequire.map = {};

		/**
		 * Hook for loading feedback
		 */
		n.irRequire.h = () => {};
	}
})(window);
